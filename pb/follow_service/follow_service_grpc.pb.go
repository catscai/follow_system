// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: follow_service.proto

package follow_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FollowServiceClient is the client API for FollowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowServiceClient interface {
	Follow(ctx context.Context, in *FollowRQ, opts ...grpc.CallOption) (*FollowRS, error)
	GetFollowList(ctx context.Context, in *GetFollowListRQ, opts ...grpc.CallOption) (*GetFollowListRS, error)
	GetFansList(ctx context.Context, in *GetFansListRQ, opts ...grpc.CallOption) (*GetFansListRS, error)
}

type followServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowServiceClient(cc grpc.ClientConnInterface) FollowServiceClient {
	return &followServiceClient{cc}
}

func (c *followServiceClient) Follow(ctx context.Context, in *FollowRQ, opts ...grpc.CallOption) (*FollowRS, error) {
	out := new(FollowRS)
	err := c.cc.Invoke(ctx, "/follow_service.Follow_service/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) GetFollowList(ctx context.Context, in *GetFollowListRQ, opts ...grpc.CallOption) (*GetFollowListRS, error) {
	out := new(GetFollowListRS)
	err := c.cc.Invoke(ctx, "/follow_service.Follow_service/GetFollowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) GetFansList(ctx context.Context, in *GetFansListRQ, opts ...grpc.CallOption) (*GetFansListRS, error) {
	out := new(GetFansListRS)
	err := c.cc.Invoke(ctx, "/follow_service.Follow_service/GetFansList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowServiceServer is the server API for FollowService service.
// All implementations must embed UnimplementedFollowServiceServer
// for forward compatibility
type FollowServiceServer interface {
	Follow(context.Context, *FollowRQ) (*FollowRS, error)
	GetFollowList(context.Context, *GetFollowListRQ) (*GetFollowListRS, error)
	GetFansList(context.Context, *GetFansListRQ) (*GetFansListRS, error)
	mustEmbedUnimplementedFollowServiceServer()
}

// UnimplementedFollowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowServiceServer struct {
}

func (UnimplementedFollowServiceServer) Follow(context.Context, *FollowRQ) (*FollowRS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedFollowServiceServer) GetFollowList(context.Context, *GetFollowListRQ) (*GetFollowListRS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowList not implemented")
}
func (UnimplementedFollowServiceServer) GetFansList(context.Context, *GetFansListRQ) (*GetFansListRS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFansList not implemented")
}
func (UnimplementedFollowServiceServer) mustEmbedUnimplementedFollowServiceServer() {}

// UnsafeFollowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowServiceServer will
// result in compilation errors.
type UnsafeFollowServiceServer interface {
	mustEmbedUnimplementedFollowServiceServer()
}

func RegisterFollowServiceServer(s grpc.ServiceRegistrar, srv FollowServiceServer) {
	s.RegisterService(&FollowService_ServiceDesc, srv)
}

func _FollowService_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/follow_service.Follow_service/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).Follow(ctx, req.(*FollowRQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_GetFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowListRQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).GetFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/follow_service.Follow_service/GetFollowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).GetFollowList(ctx, req.(*GetFollowListRQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_GetFansList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFansListRQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).GetFansList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/follow_service.Follow_service/GetFansList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).GetFansList(ctx, req.(*GetFansListRQ))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowService_ServiceDesc is the grpc.ServiceDesc for FollowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "follow_service.Follow_service",
	HandlerType: (*FollowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Follow",
			Handler:    _FollowService_Follow_Handler,
		},
		{
			MethodName: "GetFollowList",
			Handler:    _FollowService_GetFollowList_Handler,
		},
		{
			MethodName: "GetFansList",
			Handler:    _FollowService_GetFansList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "follow_service.proto",
}
